#include <math.h>
#include <String.h>
#include <Wire.h>
#include "rgb_lcd.h"



int POT = A0; // Arduino pin assigned to Potentiometer
int REST = 8;
int BUZZER = 4; // Arduino pin assigned to Buzzer


int frequency;// variable for storing the frequency
const int arraySize = 12;
double resistanceDivisions = 0;
double resistances[arraySize];

 #define outputA 4 //CLK
 #define outputB 7 //DT
 #define sw 2 //SW
 #define buzzer 9 //PWM
 #define C1 262
 #define C1s 277
 #define D1 294
 #define D1s 311
 #define E1 330
 #define F1 350
 #define F1s 370
 #define G1 392
 #define G1s 415
 #define A1 440
 #define A1s 466
 #define B1 494
 #define C2 523
 #define C2s 554
 #define D2 587
 #define D2s 622
 #define E2 659
 #define F2 698
 #define F2s 740
 #define G2 784
 #define G2s 831
 #define A2 880
 #define A2s 930//932 
 #define B2 988
 #define C3 1047
 #define arrayLength 25
 int notes[] = {C1, C1s, D1, D1s, E1, F1, F1s, G1, G1s, A1, A1s, B1, C2};//, C2s, D2, D2s, E2, F2, F2s, G2, G2s, A2, A2s, B2, C3};
 String noteNames[] = {"C1", "C1 sharp", "D1", "D1 sharp", "E1", "F1", "F1 sharp", "G1", "G1 sharp", "A1", "A1 sharp", "B1", "C2"};//, C2s, D2, D2s, E2, F2, F2s, G2, G2s, A2, A2s, B2, C3}
 String feedback[] = {"Go sharper", "Go flatter", "Perfect"};
 int prevLowerBound = -1;
 int prevUpperBound = -1;
 String prevMessage = "N/A";
 rgb_lcd lcd;
void setup() {

  Serial.begin(9600);// initializing the serial communication
  lcd.begin(16, 2);
  pinMode(BUZZER, OUTPUT); /*Assigning the buzzer the  Output mode*/
  pinMode(REST, INPUT);
  lcd.clear();
  
}

void loop() {
    int RestValue = digitalRead(REST);
    
    if (RestValue == LOW) {
      int POTValue = analogRead(POT); // read the input on analog pin
      Serial.println(POTValue);
      int frequency = map(POTValue, 10, 932, 262, 523);
      int k = 1;
      int m = 0;
      while (frequency >= notes[k] && frequency < 523) {
        m++;
        k++;
      }
      if((frequency - notes[m] <= 3) && (prevMessage != feedback[2])) {
        lcd.clear();
        lcd.print("Perfect");
        lcd.setCursor(0, 1);
        lcd.print(noteNames[m]);
        prevMessage = feedback[2];
      } else if ((notes[k] - frequency <= 3) && (prevMessage != feedback[2])){
        lcd.clear();
        lcd.print("Perfect");
        lcd.setCursor(0, 1);
        lcd.print(noteNames[k]);
        prevMessage = feedback[2];
      }
      else if ((frequency - notes[m] >= notes[k] - frequency) && (prevMessage != feedback[0])) { //closer to upper note
        lcd.clear();
        lcd.print("Go sharper");
        lcd.setCursor(0, 1);
        lcd.print(noteNames[k]);
        prevMessage = feedback[0];
      } else if ((frequency - notes[m] < notes[k] - frequency) && (prevMessage != feedback[1])) {
        lcd.clear();
        lcd.print("Go flatter");
        lcd.setCursor(0, 1);
        lcd.print(noteNames[m]);
        prevMessage = feedback[1];
      /*} else  {
        lcd.print("Perfect");
        lcd.setCursor(0, 1);
        lcd.print(noteNames[m]);*/
      }
      tone(BUZZER, frequency); 
      //lcd.clear();
      prevUpperBound = k;
      prevLowerBound = m;
  
    } else {
      noTone(BUZZER);
    }
 }